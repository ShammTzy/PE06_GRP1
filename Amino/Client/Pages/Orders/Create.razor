@page "/orders/create"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Order</h3>
<hr />
<br />
<EditForm Model="@order" OnValidSubmit="CreateOrder">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Game: </label>
        <div>
            <InputSelect @bind-Value="order.GameId" class="form-control">
                <option value="">-- Select Order --</option>
                @if (Games != null)
                {
                    foreach (var game in Games)
                    {
<option value="@game.Id">@game.Name</option>}
                    }
            </InputSelect>
            <ValidationMessage For="@(() => order.GameId)" />
        </div>
    </div>
    <div class="form-group">
        <label>Platform: </label>
        <div>
            <InputSelect @bind-Value="order.PlatformId" class="form-control">
                <option value="">-- Select Platform --</option>
                @if (Platforms != null)
                {
                    foreach (var platform in Platforms)
                    {
<option value="@platform.Id">@platform.Name</option>}
                    }
            </InputSelect>
            <ValidationMessage For="@(() => order.PlatformId)" />
        </div>
    </div>
</EditForm>
<br />

@code { 
    Order order = new Order();

    private IList<Game> Games;
    private IList<Platform> Platforms;

    protected async override Task OnInitializedAsync()
    {
        Games = await _client.GetFromJsonAsync<List<Game>>($"{Endpoints.GamesEndPoint}");
        Platforms = await _client.GetFromJsonAsync<List<Platform>>($"{Endpoints.PlatformsEndPoint}");
    }

    private async Task CreateOrder()
    {
        await _client.PostAsJsonAsync(Endpoints.OrdersEndPoint, order);
        _navManager.NavigateTo("/orders/");
    }

}