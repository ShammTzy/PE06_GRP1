@page "/games/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Games</h3>
<br />
<a href="/games/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Game
</a>
<br />
<br />

@if (Games == null)
{
<div class="alert alert-info">Loading Games...</div> }
            else
            {
<table class="table" id="gamesTable">
    <thead>
        <tr>
            <th>Name</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var game in Games)
        {
<tr>
    <td>@game.Name</td>
    <td>
        <a href="/games/view/@game.Id" class="btn btn-primary">
            <span class="oi oi-book"></span>
        </a>
        <a href="/games/edit/@game.Id" class="btn btn-warning">
            <span class="oi oi-pencil"></span>
        </a>
        <button class="btn btn-danger" @onclick="@(()=>Delete(game.Id))">
            <span class="oi oi-delete"></span>
        </button>
    </td>
</tr>}
    </tbody>
</table>
}
@code {
    private List<Game> Games;

    protected async override Task OnInitializedAsync()
    {
        Games = await _client.GetFromJsonAsync<List<Game>>($"{Endpoints.GamesEndPoint}");
    }

    async Task Delete(int gameId)
    {
        var game = Games.First(x => x.Id == gameId);
        bool confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {game.Name}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.GamesEndPoint}/{gameId}");
            await OnInitializedAsync();
        }
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#gamesTable");
    }

}
